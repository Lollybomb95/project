# telegram_bot/handlers.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import get_config, save_config, get_stats, save_stats

# —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
STATE_PROPOSAL, STATE_TARGET = range(2)

# –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_keyboard(config):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {'‚úÖ' if config['enabled'] else '‚ùå'}", callback_data="toggle_enabled")],
        [InlineKeyboardButton(f"–î–µ–º–ø–∏–Ω–≥: {'‚úÖ' if config['dumping'] else '‚ùå'}", callback_data="toggle_dumping")],
        [InlineKeyboardButton(f"–ê–¥–∞–ø—Ç–∞—Ü–∏—è: {'‚úÖ' if config['adaptive'] else '‚ùå'}", callback_data="toggle_adaptive")],
        [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
        [InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu")],
    ])

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    config = get_config()
    if update.effective_user.id not in config.get("whitelist", []):
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    await update.message.reply_text("‚öôÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard(config))

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    config = get_config()
    stats = get_stats()
    user_id = query.from_user.id
    if user_id not in config.get("whitelist", []):
        await query.edit_message_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    data = query.data

    if data == "toggle_enabled":
        config["enabled"] = not config["enabled"]
        save_config(config)
        await query.edit_message_text("‚öôÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard(config))

    elif data == "toggle_dumping":
        config["dumping"] = not config["dumping"]
        save_config(config)
        await query.edit_message_text("‚öôÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard(config))

    elif data == "toggle_adaptive":
        config["adaptive"] = not config["adaptive"]
        save_config(config)
        await query.edit_message_text("‚öôÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard(config))

    elif data == "show_stats":
        text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ —Å –¥–µ–º–ø–∏–Ω–≥–æ–º: {stats['taken_with_dump']}\n"
            f"üì¶ –ü—Ä–∏–Ω—è—Ç–æ –±–µ–∑ –¥–µ–º–ø–∏–Ω–≥–∞: {stats['taken_without_dump']}\n"
            f"‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ: {stats['rejected']}\n"
            f"üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {stats['filtered_out']}"
        )
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="reset_stats")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        await query.edit_message_text(text, reply_markup=keyboard)

    elif data == "reset_stats":
        stats.update({"taken_with_dump": 0, "taken_without_dump": 0, "rejected": 0, "filtered_out": 0})
        save_stats(stats)
        await query.edit_message_text("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞.", reply_markup=main_keyboard(config))

    elif data == "settings_menu":
        target = config["target"]
        prop = config["proposal"]
        text = (
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"üì¶ –ú–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {prop['tons']} —Ç, {prop['price']} KZT/—Ç\n"
            f"üéØ –¢–∞—Ä–≥–µ—Ç: {target['location']}, {target['min_volume']}-{target['max_volume']} —Ç, –æ—Ç {target['min_price']} KZT/—Ç"
        )
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì• –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="set_proposal")],
            [InlineKeyboardButton("üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞—Ä–≥–µ—Ç", callback_data="set_target")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")],
        ])
        await query.edit_message_text(text, reply_markup=keyboard)

    elif data == "set_proposal":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: [—Ç–æ–Ω–Ω] [—Ü–µ–Ω–∞]")
        return STATE_PROPOSAL

    elif data == "set_target":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: [–ª–æ–∫–∞—Ü–∏—è] [–º–∏–Ω.–æ–±—ä—ë–º] [–º–∞–∫—Å.–æ–±—ä—ë–º] [–º–∏–Ω.—Ü–µ–Ω–∞] \n(–ª–æ–∫–∞—Ü–∏—è '-' = –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)" )
        return STATE_TARGET

    elif data == "back_to_main":
        await query.edit_message_text("‚öôÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard(config))

    return -1

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    config = get_config()
    user_id = update.effective_user.id
    if user_id not in config.get("whitelist", []):
        return

    text = update.message.text.strip()
    state = context.user_data.get("state")

    if state == STATE_PROPOSAL:
        try:
            tons, price = map(int, text.split())
            config["proposal"] = {"tons": tons, "price": price}
            save_config(config)
            await update.message.reply_text("‚úÖ –ú–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        except:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 30 8000")
    elif state == STATE_TARGET:
        try:
            loc, minv, maxv, minp = text.split()
            config["target"] = {
                "location": loc,
                "min_volume": int(minv),
                "max_volume": int(maxv),
                "min_price": int(minp)
            }
            save_config(config)
            await update.message.reply_text("‚úÖ –¢–∞—Ä–≥–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω")
        except:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: almaty 20 60 7800")

    context.user_data["state"] = None
    await update.message.reply_text("‚öôÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard(config))